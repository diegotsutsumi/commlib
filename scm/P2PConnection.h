#ifndef _SNITCH_NOTIFIER_H_
#define _SNITCH_NOTIFIER_H_
#include <vector>
#include <string>
#include "Socket.h"
#include "Thread.h"

//using namespace std;

#define MAX_P2P_PACKET_SIZE 2048

typedef struct
{
	std::string ip;
	union
	{
		unsigned short port;
		unsigned char port_bytes[2];
	};
	bool directConnection;
}P2PEndpoint;

typedef struct 
{
	unsigned int begin;
	unsigned int end;
}P2PPacketIndex;

typedef enum 
{
	State_Disconnected=0,
	State_Waiting,
	State_Connecting,
	State_OpenningChannel,
	State_AskingCamera,
	State_Streaming
}P2PConnectionState;

typedef enum 
{
	Return_Nothing=0,
	Return_ConnectionLoss,
	Return_ServerOffline,
	Return_ServerTimedOut,
	Return_CameraOffline,
	Return_CameraTimedOut,
	Return_WrongPassword,
	Return_Disconnected
}P2PReturn;

class P2PPacket
{
public:
	P2PPacket(unsigned char *_pkt, unsigned short _size, unsigned int _index);
	P2PPacket();
	~P2PPacket();

	bool setByte(unsigned char byte, unsigned short position);
	unsigned char getByte(unsigned short position);

	void setPacket(unsigned char *_pkt, unsigned short _size, unsigned int _index);
	unsigned char * getPacket(unsigned short * out_size);
	unsigned short getSize();

	void setIndex(unsigned int _index);
	unsigned int getIndex();

	void setBegin();
	bool isBegin();

	void setEnd();
	bool isEnd();

	void clearPacket();

	bool isSet();

private:
	unsigned char * packet;
	unsigned short size;

	unsigned int index;
	bool is_begin;
	bool is_end;
};

class P2PBuffer
{
public:
	P2PBuffer(unsigned short max_size);
	~P2PBuffer();

	unsigned char* getPacket(unsigned short position, unsigned short * out_size);
	void setPacket(unsigned short position, unsigned char * _pkt, unsigned short _size);
	bool isBegin(unsigned short position);
	bool isEnd(unsigned short position);
	void setBegin(unsigned short position);
	void setEnd(unsigned short position);
	bool isSet(unsigned short position);
	void clearPacket(unsigned short position);
	void clearBuffer();

	unsigned short getOldestPosition();
	unsigned short getNewestPosition();

	unsigned long int getRangeSize(unsigned short first_pos, unsigned short sec_pos);
private:
	P2PPacket buff[65536];

	unsigned int packetIndex;
	unsigned int packetCounter;
	unsigned short oldestPosition;
	unsigned short newestPosition;

	unsigned short maxSize;

	bool firstPacket;

	void setOldestPacket();
};

class P2PConnection
{
public:
	P2PConnection(unsigned long long _cameraId, unsigned char* _p2pId, unsigned int _p2pIdSize, unsigned char* _user, unsigned short _userSize, unsigned char* _password, unsigned short _passwordSize);
	~P2PConnection();

	bool start();
	void stop();
	bool isRunning();
	void performConnection();

	P2PReturn getReturn();
	unsigned long long getCameraId();
	P2PConnectionState getConnectionState();
	unsigned char * getLastSnapshot(unsigned long int *out_size);

private:

	PthreadId connectionThreadId;
	pthread_mutex_t connectionRunningMutex;
	pthread_mutex_t releaseMutex;
	volatile bool stopConnectionThread;
	volatile bool connectionRunning;
	volatile bool releaseThread;
	bool startConnection();
	void stopConnection();
	static void* runConnection(void* context);
	void* connectionThread();

	std::vector<P2PEndpoint*> * discoverEndpoints();
	std::vector<P2PEndpoint*> * discoverRemoteEndpoints();
	std::vector<P2PPacketIndex*> * splitPackets(unsigned char* data, int len);

	bool openConnection(std::vector<P2PEndpoint*> * endpoints, bool directConnection, int *out_connectedEndpointIndex);
	void startStreaming(P2PEndpoint* endpoint);

	unsigned char* user;
	unsigned short userSize;
	unsigned char* password;
	unsigned short passwordSize;
	unsigned char p2pId[22];
	unsigned long long cameraId;

	UDPSocket *cl_sock;
	pthread_mutex_t connectionStateMutex;
	P2PConnectionState connectionState;
	pthread_mutex_t returnMutex;
	P2PReturn ret;

	pthread_mutex_t capturingMutex;
	P2PBuffer * capturingBuffer;
	unsigned short imageBeginIndex;
	unsigned short imageEndIndex;

	unsigned long int imageBeginCurrentIndex;


	unsigned char msg1[4] = {0xf1,0x00,0x00,0x00};

	//unsigned char msg1Remote[24] =	{0xf1,0x67,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00};
	//unsigned char msg1Remote[24] =	{0xf1,0x67,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00};
	unsigned char msg1Remote[24] =		{0xf1,0x67,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00};

	//unsigned char msg2[40] =		{0xf1,0x20,0x00,0x24,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00,0x00,0x02,0xdf,0xff,0x6c,0x11,0xa8,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	//unsigned char msg2[40] =		{0xf1,0x20,0x00,0x24,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00,0x00,0x02,0xdf,0xff,0x6e,0x11,0xa8,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	unsigned char msg2[40] =		{0xf1,0x20,0x00,0x24,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x02,0xdf,0xff,0x6c,0x11,0xa8,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	//unsigned char msg41[24] =		{0xf1,0x41,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00};
	//unsigned char msg41[24] =		{0xf1,0x41,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00};
	unsigned char msg41[24] =		{0xf1,0x41,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00};

	//unsigned char msg42[24] =		{0xf1,0x42,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00};
	//unsigned char msg42[24] =		{0xf1,0x42,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00};
	unsigned char msg42[24] =		{0xf1,0x42,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00};

	//unsigned char msg83[32] =		{0xf1,0x83,0x00,0x1c,0x41,0x38,0x6a,0x6c,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	//unsigned char msg83[32] =		{0xf1,0x83,0x00,0x1c,0x41,0x38,0x6a,0x6c,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	unsigned char msg83[32] =		{0xf1,0x83,0x00,0x1c,0x41,0x38,0x6a,0x6c,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	//unsigned char msg84[24] =		{0xf1,0x84,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00};
	//unsigned char msg84[24] =		{0xf1,0x84,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00};
	unsigned char msg84[24] =		{0xf1,0x84,0x00,0x14,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00};

	//unsigned char msg80[44] =		{0xf1,0x80,0x00,0x28,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xdd,0x87,0x42,0x42,0x43,0x42,0x45,0x00,0x00,0x00,0x00,0x02,0x05,0x0c,0x25,0x3d,0x6f,0xb5,0x48,0x8c,0xb3,0x00,0x0c,0x00,0x00,0x00,0x4d,0x6f,0x55,0x74};
	//unsigned char msg80[44] =		{0xf1,0x80,0x00,0x28,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xc9,0x75,0x42,0x45,0x44,0x44,0x41,0x00,0x00,0x00,0x00,0x02,0x05,0x0c,0x25,0x3d,0x6f,0xb5,0x48,0x8c,0xb3,0x00,0x0c,0x00,0x00,0x00,0x4d,0x6f,0x55,0x74};
	unsigned char msg80[44] =		{0xf1,0x80,0x00,0x28,0x4e,0x49,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb0,0x5b,0x44,0x42,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x02,0x05,0x0c,0x25,0x3d,0x6f,0xb5,0x48,0x8c,0xb3,0x00,0x0c,0x00,0x00,0x00,0x4d,0x6f,0x55,0x74};

	unsigned char msge1[5] = {0xf1,0xe1,0x00,0x00};
	unsigned char msge0[5] = {0xf1,0xe0,0x00,0x00};
	unsigned char msgf0_final[5] = {0xf1,0xf0,0x00,0x00};

	unsigned char msg70[5] = {0xf1,0x70,0x00,0x00};
	unsigned char msg72[5] = {0xf1,0x72,0x00,0x00};

	//unsigned char msghttpCheckUser[78] = {0xf1,0xd0,0x00,0x4a,0xd1,0x00,0x00,0x00,0x01,0x0a,0x00,0x00,0x3e,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x63,0x68,0x65,0x63,0x6b,0x5f,0x75,0x73,0x65,0x72,0x2e,0x63,0x67,0x69,0x3f,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x26};
	//unsigned char msghttpGetCamera[78] = {0xf1,0xd0,0x00,0x4a,0xd1,0x00,0x00,0x01,0x01,0x0a,0x00,0x00,0x3e,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x67,0x65,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x2e,0x63,0x67,0x69,0x3f,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x26};
	//unsigned char msghttpLiveStream[90] = {0xf1,0xd0,0x00,0x56,0xd1,0x00,0x00,0x02,0x01,0x0a,0x00,0x00,0x4a,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x6c,0x69,0x76,0x65,0x73,0x74,0x72,0x65,0x61,0x6d,0x2e,0x63,0x67,0x69,0x3f,0x73,0x74,0x72,0x65,0x61,0x6d,0x69,0x64,0x3d,0x31,0x30,0x26,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x26};


	unsigned char msghttpCheckUser_base[88] = {0xf1,0xd0,0x00,0x54,0xd1,0x00,0x00,0x00,0x01,0x0a,0x00,0x00,0x48,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x63,0x68,0x65,0x63,0x6b,0x5f,0x75,0x73,0x65,0x72,0x2e,0x63,0x67,0x69,0x3f,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26};
	unsigned char msghttpGetCamera_base[88] = {0xf1,0xd0,0x00,0x54,0xd1,0x00,0x00,0x01,0x01,0x0a,0x00,0x00,0x48,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x67,0x65,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x2e,0x63,0x67,0x69,0x3f,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26};
	unsigned char msghttpLiveStream_base[100] = {0xf1,0xd0,0x00,0x60,0xd1,0x00,0x00,0x02,0x01,0x0a,0x00,0x00,0x54,0x00,0x00,0x00,0x47,0x45,0x54,0x20,0x2f,0x6c,0x69,0x76,0x65,0x73,0x74,0x72,0x65,0x61,0x6d,0x2e,0x63,0x67,0x69,0x3f,0x73,0x74,0x72,0x65,0x61,0x6d,0x69,0x64,0x3d,0x31,0x30,0x26,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x75,0x73,0x65,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x6c,0x6f,0x67,0x69,0x6e,0x70,0x61,0x73,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26,0x75,0x73,0x65,0x72,0x3d,0x61,0x64,0x6d,0x69,0x6e,0x26,0x70,0x77,0x64,0x3d,0x6e,0x76,0x72,0x64,0x63,0x26};

	unsigned char* msghttpCheckUser;
	unsigned char* msghttpGetCamera;
	unsigned char* msghttpLiveStream;

	unsigned int ckUserSize;
	unsigned int gtCamSize;
	unsigned int livStrSize;

};

#endif